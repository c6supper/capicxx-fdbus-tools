/*******************************************************************************
* This file has been generated by Franca's FDeployGenerator.
* Source: deployment specification 'org.genivi.commonapi.fdbus.deployment'
*******************************************************************************/
package org.genivi.commonapi.fdbus;

import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.franca.core.franca.FArgument;
import org.franca.core.franca.FArrayType;
import org.franca.core.franca.FAttribute;
import org.franca.core.franca.FBroadcast;
import org.franca.core.franca.FEnumerationType;
import org.franca.core.franca.FEnumerator;
import org.franca.core.franca.FField;
import org.franca.core.franca.FInterface;
import org.franca.core.franca.FMethod;
import org.franca.core.franca.FModelElement;
import org.franca.core.franca.FStructType;
import org.franca.core.franca.FUnionType;
import org.franca.deploymodel.core.FDeployedInterface;
import org.franca.deploymodel.core.FDeployedRootElement;
import org.franca.deploymodel.core.FDeployedTypeCollection;
import org.franca.deploymodel.core.MappingGenericPropertyAccessor;
import org.franca.deploymodel.dsl.fDeploy.FDCompoundOverwrites;
import org.franca.deploymodel.dsl.fDeploy.FDEnumValue;
import org.franca.deploymodel.dsl.fDeploy.FDEnumerationOverwrites;
import org.franca.deploymodel.dsl.fDeploy.FDExtensionElement;
import org.franca.deploymodel.dsl.fDeploy.FDExtensionRoot;
import org.franca.deploymodel.dsl.fDeploy.FDField;
import org.franca.deploymodel.dsl.fDeploy.FDOverwriteElement;
import org.franca.deploymodel.dsl.fDeploy.FDTypeOverwrites;

import com.google.common.collect.Maps;

/**
 * This is a collection of all interfaces and classes needed for
 * accessing deployment properties according to deployment specification
 * 'org.genivi.commonapi.fdbus.deployment'.
 */
public class Deployment {

	/**
	 * Enumerations for deployment specification org.genivi.commonapi.fdbus.deployment.
	 */
	public interface Enums
		extends org.genivi.commonapi.core.Deployment.Enums
	{
		public enum FDBusDefaultErrorCoding {
			Header
		}

		public enum FDBusAttributeEndianess {
			le, be
		}

		public enum FDBusAttributeCRCWidth {
			zero, one, four
		}

		public enum FDBusMethodEndianess {
			le, be
		}

		public enum FDBusMethodCRCWidth {
			zero, one, four
		}

		public enum FDBusErrorCoding {
			Header
		}

		public enum FDBusBroadcastEndianess {
			le, be
		}

		public enum FDBusBroadcastCRCWidth {
			zero, one, four
		}

		public enum FDBusStringEncoding {
			utf8, utf16le, utf16be
		}

	}

	/**
	 * Interface for data deployment properties for 'org.genivi.commonapi.fdbus.deployment' specification
	 *
	 * This is the data types related part only.
	 */
	public interface IDataPropertyAccessor
		extends Enums, org.genivi.commonapi.core.Deployment.IDataPropertyAccessor
	{
		// host 'arrays'
		public Integer getFDBusArrayMinLength(FArrayType obj);
		public Integer getFDBusArrayMinLength(FField obj);
		public Integer getFDBusArrayMaxLength(FArrayType obj);
		public Integer getFDBusArrayMaxLength(FField obj);
		public Integer getFDBusArrayLengthWidth(FArrayType obj);
		public Integer getFDBusArrayLengthWidth(FField obj);

		// host 'unions'
		public Integer getFDBusUnionLengthWidth(FUnionType obj);
		public Integer getFDBusUnionTypeWidth(FUnionType obj);
		public Boolean getFDBusUnionDefaultOrder(FUnionType obj);
		public Integer getFDBusUnionMaxLength(FUnionType obj);

		// host 'structs'
		public Integer getFDBusStructLengthWidth(FStructType obj);

		// host 'enumerations'
		public Integer getFDBusEnumWidth(FEnumerationType obj);
		public Integer getFDBusEnumBitWidth(FEnumerationType obj);
		public Integer getFDBusEnumInvalidValue(FEnumerationType obj);

		// host 'strings'
		public Integer getFDBusStringLength(EObject obj);
		public Integer getFDBusStringLengthWidth(EObject obj);
		public FDBusStringEncoding getFDBusStringEncoding(EObject obj);

		// host 'byte_buffers'
		public Integer getFDBusByteBufferMaxLength(EObject obj);
		public Integer getFDBusByteBufferMinLength(EObject obj);
		public Integer getFDBusByteBufferLengthWidth(EObject obj);

		// host 'integers'
		public Integer getFDBusIntegerBitWidth(EObject obj);
		public Integer getFDBusIntegerInvalidValue(EObject obj);


		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context
		 * of a Franca FField object. I.e., the FField obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FField which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		@Override
        public IDataPropertyAccessor getOverwriteAccessor(FField obj);

		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context
		 * of a Franca FArrayType object. I.e., the FArrayType obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FArrayType which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		@Override
        public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj);
	}

	/**
	 * Helper class for data-related property accessors.
	 */
	public static class DataPropertyAccessorHelper implements Enums
	{
		final private MappingGenericPropertyAccessor target;
		final private IDataPropertyAccessor owner;

		public DataPropertyAccessorHelper(
			MappingGenericPropertyAccessor target,
			IDataPropertyAccessor owner
		) {
			this.target = target;
			this.owner = owner;
		}

		public static FDBusDefaultErrorCoding convertFDBusDefaultErrorCoding(String val) {
			if (val.equals("Header"))
				return FDBusDefaultErrorCoding.Header;
			return null;
		}

		public static FDBusAttributeEndianess convertFDBusAttributeEndianess(String val) {
			if (val.equals("le"))
				return FDBusAttributeEndianess.le; else
			if (val.equals("be"))
				return FDBusAttributeEndianess.be;
			return null;
		}

		public static FDBusAttributeCRCWidth convertFDBusAttributeCRCWidth(String val) {
			if (val.equals("zero"))
				return FDBusAttributeCRCWidth.zero; else
			if (val.equals("one"))
				return FDBusAttributeCRCWidth.one; else
			if (val.equals("four"))
				return FDBusAttributeCRCWidth.four;
			return null;
		}

		public static FDBusMethodEndianess convertFDBusMethodEndianess(String val) {
			if (val.equals("le"))
				return FDBusMethodEndianess.le; else
			if (val.equals("be"))
				return FDBusMethodEndianess.be;
			return null;
		}

		public static FDBusMethodCRCWidth convertFDBusMethodCRCWidth(String val) {
			if (val.equals("zero"))
				return FDBusMethodCRCWidth.zero; else
			if (val.equals("one"))
				return FDBusMethodCRCWidth.one; else
			if (val.equals("four"))
				return FDBusMethodCRCWidth.four;
			return null;
		}

		public static FDBusErrorCoding convertFDBusErrorCoding(String val) {
			if (val.equals("Header"))
				return FDBusErrorCoding.Header;
			return null;
		}

		public static FDBusBroadcastEndianess convertFDBusBroadcastEndianess(String val) {
			if (val.equals("le"))
				return FDBusBroadcastEndianess.le; else
			if (val.equals("be"))
				return FDBusBroadcastEndianess.be;
			return null;
		}

		public static FDBusBroadcastCRCWidth convertFDBusBroadcastCRCWidth(String val) {
			if (val.equals("zero"))
				return FDBusBroadcastCRCWidth.zero; else
			if (val.equals("one"))
				return FDBusBroadcastCRCWidth.one; else
			if (val.equals("four"))
				return FDBusBroadcastCRCWidth.four;
			return null;
		}

		public static FDBusStringEncoding convertFDBusStringEncoding(String val) {
			if (val.equals("utf8"))
				return FDBusStringEncoding.utf8; else
			if (val.equals("utf16le"))
				return FDBusStringEncoding.utf16le; else
			if (val.equals("utf16be"))
				return FDBusStringEncoding.utf16be;
			return null;
		}


		protected IDataPropertyAccessor getOverwriteAccessorAux(FModelElement obj) {
			FDOverwriteElement fd = (FDOverwriteElement)target.getFDElement(obj);
			FDTypeOverwrites overwrites = fd.getOverwrites();
			if (overwrites==null)
				return owner;
			else
				return new OverwriteAccessor(overwrites, owner, target);
		}
	}

	/**
	 * Accessor for deployment properties for Franca type collections according
	 * to deployment specification 'org.genivi.commonapi.fdbus.deployment'.
	 */
	public static class TypeCollectionPropertyAccessor
		extends org.genivi.commonapi.core.Deployment.TypeCollectionPropertyAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;

		public TypeCollectionPropertyAccessor(FDeployedTypeCollection target) {
			super(target);
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}

		// host 'arrays'
		@Override
		public Integer getFDBusArrayMinLength(FArrayType obj) {
			return target.getInteger(obj, "FDBusArrayMinLength");
		}
		@Override
		public Integer getFDBusArrayMinLength(FField obj) {
			return target.getInteger(obj, "FDBusArrayMinLength");
		}
		@Override
		public Integer getFDBusArrayMaxLength(FArrayType obj) {
			return target.getInteger(obj, "FDBusArrayMaxLength");
		}
		@Override
		public Integer getFDBusArrayMaxLength(FField obj) {
			return target.getInteger(obj, "FDBusArrayMaxLength");
		}
		@Override
		public Integer getFDBusArrayLengthWidth(FArrayType obj) {
			return target.getInteger(obj, "FDBusArrayLengthWidth");
		}
		@Override
		public Integer getFDBusArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "FDBusArrayLengthWidth");
		}

		// host 'unions'
		@Override
		public Integer getFDBusUnionLengthWidth(FUnionType obj) {
			return target.getInteger(obj, "FDBusUnionLengthWidth");
		}
		@Override
		public Integer getFDBusUnionTypeWidth(FUnionType obj) {
			return target.getInteger(obj, "FDBusUnionTypeWidth");
		}
		@Override
		public Boolean getFDBusUnionDefaultOrder(FUnionType obj) {
			return target.getBoolean(obj, "FDBusUnionDefaultOrder");
		}
		@Override
		public Integer getFDBusUnionMaxLength(FUnionType obj) {
			return target.getInteger(obj, "FDBusUnionMaxLength");
		}

		// host 'structs'
		@Override
		public Integer getFDBusStructLengthWidth(FStructType obj) {
			return target.getInteger(obj, "FDBusStructLengthWidth");
		}

		// host 'enumerations'
		@Override
		public Integer getFDBusEnumWidth(FEnumerationType obj) {
			return target.getInteger(obj, "FDBusEnumWidth");
		}
		@Override
		public Integer getFDBusEnumBitWidth(FEnumerationType obj) {
			return target.getInteger(obj, "FDBusEnumBitWidth");
		}
		@Override
		public Integer getFDBusEnumInvalidValue(FEnumerationType obj) {
			return target.getInteger(obj, "FDBusEnumInvalidValue");
		}

		// host 'strings'
		@Override
		public Integer getFDBusStringLength(EObject obj) {
			return target.getInteger(obj, "FDBusStringLength");
		}
		@Override
		public Integer getFDBusStringLengthWidth(EObject obj) {
			return target.getInteger(obj, "FDBusStringLengthWidth");
		}
		@Override
		public FDBusStringEncoding getFDBusStringEncoding(EObject obj) {
			String e = target.getEnum(obj, "FDBusStringEncoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusStringEncoding(e);
		}

		// host 'byte_buffers'
		@Override
		public Integer getFDBusByteBufferMaxLength(EObject obj) {
			return target.getInteger(obj, "FDBusByteBufferMaxLength");
		}
		@Override
		public Integer getFDBusByteBufferMinLength(EObject obj) {
			return target.getInteger(obj, "FDBusByteBufferMinLength");
		}
		@Override
		public Integer getFDBusByteBufferLengthWidth(EObject obj) {
			return target.getInteger(obj, "FDBusByteBufferLengthWidth");
		}

		// host 'integers'
		@Override
		public Integer getFDBusIntegerBitWidth(EObject obj) {
			return target.getInteger(obj, "FDBusIntegerBitWidth");
		}
		@Override
		public Integer getFDBusIntegerInvalidValue(EObject obj) {
			return target.getInteger(obj, "FDBusIntegerInvalidValue");
		}


		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}

		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	}

	/**
	 * Accessor for deployment properties for Franca interfaces according to
	 * deployment specification 'org.genivi.commonapi.fdbus.deployment'.
	 */
	public static class InterfacePropertyAccessor
		extends org.genivi.commonapi.core.Deployment.InterfacePropertyAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;

		public InterfacePropertyAccessor(FDeployedInterface target) {
			super(target);
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}

		// host 'interfaces'
		public Integer getFDBusServiceID(FInterface obj) {
			return target.getInteger(obj, "FDBusServiceID");
		}
		public List<Integer> getFDBusEventGroups(FInterface obj) {
			return target.getIntegerArray(obj, "FDBusEventGroups");
		}

		// host 'attributes'
		public Boolean getFDBusAttributeReliable(FAttribute obj) {
			return target.getBoolean(obj, "FDBusAttributeReliable");
		}
		public Integer getFDBusGetterID(FAttribute obj) {
			return target.getInteger(obj, "FDBusGetterID");
		}
		public Integer getFDBusSetterID(FAttribute obj) {
			return target.getInteger(obj, "FDBusSetterID");
		}
		public Integer getFDBusNotifierID(FAttribute obj) {
			return target.getInteger(obj, "FDBusNotifierID");
		}
		public List<Integer> getFDBusNotifierEventGroups(FAttribute obj) {
			return target.getIntegerArray(obj, "FDBusNotifierEventGroups");
		}
		public List<Integer> getFDBusEventGroups(FAttribute obj) {
			return target.getIntegerArray(obj, "FDBusEventGroups");
		}
		public Integer getFDBusGetterMaxRetentionTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusGetterMaxRetentionTime");
		}
		public Integer getFDBusSetterMaxRetentionTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusSetterMaxRetentionTime");
		}
		public Integer getFDBusNotifierMaxRetentionTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusNotifierMaxRetentionTime");
		}
		public Integer getFDBusGetterResponseMaxRetentionTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusGetterResponseMaxRetentionTime");
		}
		public Integer getFDBusSetterResponseMaxRetentionTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusSetterResponseMaxRetentionTime");
		}
		public Integer getFDBusGetterRequestDebounceTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusGetterRequestDebounceTime");
		}
		public Integer getFDBusSetterRequestDebounceTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusSetterRequestDebounceTime");
		}
		public Integer getFDBusNotifierDebounceTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusNotifierDebounceTime");
		}
		public Integer getFDBusGetterResponseDebounceTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusGetterResponseDebounceTime");
		}
		public Integer getFDBusSetterResponseDebounceTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusSetterResponseDebounceTime");
		}
		public Integer getFDBusSetterSegmentLength(FAttribute obj) {
			return target.getInteger(obj, "FDBusSetterSegmentLength");
		}
		public Integer getFDBusSetterSeparationTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusSetterSeparationTime");
		}
		public Integer getFDBusGetterSegmentLengthResponse(FAttribute obj) {
			return target.getInteger(obj, "FDBusGetterSegmentLengthResponse");
		}
		public Integer getFDBusGetterSeparationTimeResponse(FAttribute obj) {
			return target.getInteger(obj, "FDBusGetterSeparationTimeResponse");
		}
		public Integer getFDBusNotifierSegmentLength(FAttribute obj) {
			return target.getInteger(obj, "FDBusNotifierSegmentLength");
		}
		public Integer getFDBusNotifierSeparationTime(FAttribute obj) {
			return target.getInteger(obj, "FDBusNotifierSeparationTime");
		}
		public FDBusAttributeEndianess getFDBusAttributeEndianess(FAttribute obj) {
			String e = target.getEnum(obj, "FDBusAttributeEndianess");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusAttributeEndianess(e);
		}
		public FDBusAttributeCRCWidth getFDBusAttributeCRCWidth(FAttribute obj) {
			String e = target.getEnum(obj, "FDBusAttributeCRCWidth");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusAttributeCRCWidth(e);
		}

		// host 'methods'
		public Boolean getFDBusReliable(FMethod obj) {
			return target.getBoolean(obj, "FDBusReliable");
		}
		public Integer getFDBusMethodID(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodID");
		}
		public Integer getFDBusMethodMaxRetentionTime(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodMaxRetentionTime");
		}
		public Integer getFDBusMethodResponseMaxRetentionTime(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodResponseMaxRetentionTime");
		}
		public Integer getFDBusMethodRequestDebounceTime(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodRequestDebounceTime");
		}
		public Integer getFDBusMethodResponseDebounceTime(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodResponseDebounceTime");
		}
		public Integer getFDBusMethodSegmentLength(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodSegmentLength");
		}
		public Integer getFDBusMethodSeparationTime(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodSeparationTime");
		}
		public Integer getFDBusMethodSegmentLengthResponse(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodSegmentLengthResponse");
		}
		public Integer getFDBusMethodSeparationTimeResponse(FMethod obj) {
			return target.getInteger(obj, "FDBusMethodSeparationTimeResponse");
		}
		public FDBusMethodEndianess getFDBusMethodEndianess(FMethod obj) {
			String e = target.getEnum(obj, "FDBusMethodEndianess");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusMethodEndianess(e);
		}
		public FDBusMethodCRCWidth getFDBusMethodCRCWidth(FMethod obj) {
			String e = target.getEnum(obj, "FDBusMethodCRCWidth");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusMethodCRCWidth(e);
		}
		public FDBusErrorCoding getFDBusErrorCoding(FMethod obj) {
			String e = target.getEnum(obj, "FDBusErrorCoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusErrorCoding(e);
		}

		// host 'broadcasts'
		public Boolean getFDBusReliable(FBroadcast obj) {
			return target.getBoolean(obj, "FDBusReliable");
		}
		public Integer getFDBusEventID(FBroadcast obj) {
			return target.getInteger(obj, "FDBusEventID");
		}
		public List<Integer> getFDBusEventGroups(FBroadcast obj) {
			return target.getIntegerArray(obj, "FDBusEventGroups");
		}
		public Integer getFDBusBroadcastMaxRetentionTime(FBroadcast obj) {
			return target.getInteger(obj, "FDBusBroadcastMaxRetentionTime");
		}
		public Integer getFDBusBroadcastDebounceTime(FBroadcast obj) {
			return target.getInteger(obj, "FDBusBroadcastDebounceTime");
		}
		public Integer getFDBusBroadcastSegmentLength(FBroadcast obj) {
			return target.getInteger(obj, "FDBusBroadcastSegmentLength");
		}
		public Integer getFDBusBroadcastSeparationTime(FBroadcast obj) {
			return target.getInteger(obj, "FDBusBroadcastSeparationTime");
		}
		public FDBusBroadcastEndianess getFDBusBroadcastEndianess(FBroadcast obj) {
			String e = target.getEnum(obj, "FDBusBroadcastEndianess");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusBroadcastEndianess(e);
		}
		public FDBusBroadcastCRCWidth getFDBusBroadcastCRCWidth(FBroadcast obj) {
			String e = target.getEnum(obj, "FDBusBroadcastCRCWidth");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusBroadcastCRCWidth(e);
		}

		// host 'arrays'
		@Override
		public Integer getFDBusArrayMinLength(FArrayType obj) {
			return target.getInteger(obj, "FDBusArrayMinLength");
		}
		@Override
		public Integer getFDBusArrayMinLength(FField obj) {
			return target.getInteger(obj, "FDBusArrayMinLength");
		}
		public Integer getFDBusArrayMinLength(FAttribute obj) {
			return target.getInteger(obj, "FDBusArrayMinLength");
		}
		public Integer getFDBusArrayMinLength(FArgument obj) {
			return target.getInteger(obj, "FDBusArrayMinLength");
		}
		@Override
		public Integer getFDBusArrayMaxLength(FArrayType obj) {
			return target.getInteger(obj, "FDBusArrayMaxLength");
		}
		@Override
		public Integer getFDBusArrayMaxLength(FField obj) {
			return target.getInteger(obj, "FDBusArrayMaxLength");
		}
		public Integer getFDBusArrayMaxLength(FAttribute obj) {
			return target.getInteger(obj, "FDBusArrayMaxLength");
		}
		public Integer getFDBusArrayMaxLength(FArgument obj) {
			return target.getInteger(obj, "FDBusArrayMaxLength");
		}
		@Override
		public Integer getFDBusArrayLengthWidth(FArrayType obj) {
			return target.getInteger(obj, "FDBusArrayLengthWidth");
		}
		@Override
		public Integer getFDBusArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "FDBusArrayLengthWidth");
		}
		public Integer getFDBusArrayLengthWidth(FAttribute obj) {
			return target.getInteger(obj, "FDBusArrayLengthWidth");
		}
		public Integer getFDBusArrayLengthWidth(FArgument obj) {
			return target.getInteger(obj, "FDBusArrayLengthWidth");
		}

		// host 'unions'
		@Override
		public Integer getFDBusUnionLengthWidth(FUnionType obj) {
			return target.getInteger(obj, "FDBusUnionLengthWidth");
		}
		@Override
		public Integer getFDBusUnionTypeWidth(FUnionType obj) {
			return target.getInteger(obj, "FDBusUnionTypeWidth");
		}
		@Override
		public Boolean getFDBusUnionDefaultOrder(FUnionType obj) {
			return target.getBoolean(obj, "FDBusUnionDefaultOrder");
		}
		@Override
		public Integer getFDBusUnionMaxLength(FUnionType obj) {
			return target.getInteger(obj, "FDBusUnionMaxLength");
		}

		// host 'structs'
		@Override
		public Integer getFDBusStructLengthWidth(FStructType obj) {
			return target.getInteger(obj, "FDBusStructLengthWidth");
		}

		// host 'enumerations'
		@Override
		public Integer getFDBusEnumWidth(FEnumerationType obj) {
			return target.getInteger(obj, "FDBusEnumWidth");
		}
		@Override
		public Integer getFDBusEnumBitWidth(FEnumerationType obj) {
			return target.getInteger(obj, "FDBusEnumBitWidth");
		}
		@Override
		public Integer getFDBusEnumInvalidValue(FEnumerationType obj) {
			return target.getInteger(obj, "FDBusEnumInvalidValue");
		}

		// host 'strings'
		@Override
		public Integer getFDBusStringLength(EObject obj) {
			return target.getInteger(obj, "FDBusStringLength");
		}
		@Override
		public Integer getFDBusStringLengthWidth(EObject obj) {
			return target.getInteger(obj, "FDBusStringLengthWidth");
		}
		@Override
		public FDBusStringEncoding getFDBusStringEncoding(EObject obj) {
			String e = target.getEnum(obj, "FDBusStringEncoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusStringEncoding(e);
		}

		// host 'byte_buffers'
		@Override
		public Integer getFDBusByteBufferMaxLength(EObject obj) {
			return target.getInteger(obj, "FDBusByteBufferMaxLength");
		}
		@Override
		public Integer getFDBusByteBufferMinLength(EObject obj) {
			return target.getInteger(obj, "FDBusByteBufferMinLength");
		}
		@Override
		public Integer getFDBusByteBufferLengthWidth(EObject obj) {
			return target.getInteger(obj, "FDBusByteBufferLengthWidth");
		}

		// host 'integers'
		@Override
		public Integer getFDBusIntegerBitWidth(EObject obj) {
			return target.getInteger(obj, "FDBusIntegerBitWidth");
		}
		@Override
		public Integer getFDBusIntegerInvalidValue(EObject obj) {
			return target.getInteger(obj, "FDBusIntegerInvalidValue");
		}

		// host 'attributes'
		public Integer getFDBusAttrMapMinLength(FAttribute obj) {
			return target.getInteger(obj, "FDBusAttrMapMinLength");
		}
		public Integer getFDBusAttrMapMaxLength(FAttribute obj) {
			return target.getInteger(obj, "FDBusAttrMapMaxLength");
		}
		public Integer getFDBusAttrMapLengthWidth(FAttribute obj) {
			return target.getInteger(obj, "FDBusAttrMapLengthWidth");
		}

		// host 'arguments'
		public Integer getFDBusArgMapMinLength(FArgument obj) {
			return target.getInteger(obj, "FDBusArgMapMinLength");
		}
		public Integer getFDBusArgMapMaxLength(FArgument obj) {
			return target.getInteger(obj, "FDBusArgMapMaxLength");
		}
		public Integer getFDBusArgMapLengthWidth(FArgument obj) {
			return target.getInteger(obj, "FDBusArgMapLengthWidth");
		}


		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context
		 * of a Franca FAttribute object. I.e., the FAttribute obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FAttribute which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		@Override
        public IDataPropertyAccessor getOverwriteAccessor(FAttribute obj) {
			return helper.getOverwriteAccessorAux(obj);
		}

		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context
		 * of a Franca FArgument object. I.e., the FArgument obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FArgument which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		@Override
        public IDataPropertyAccessor getOverwriteAccessor(FArgument obj) {
			return helper.getOverwriteAccessorAux(obj);
		}

		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}

		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	}

	/**
	 * Accessor for deployment properties for 'provider' roots
	 * (which are defined by the 'providers and instances' extension)
	 * according to the 'org.genivi.commonapi.fdbus.deployment' specification.
	 */
	public static class ProviderPropertyAccessor
		extends org.genivi.commonapi.core.Deployment.ProviderPropertyAccessor
		implements Enums
	{
		final private FDeployedRootElement<FDExtensionRoot> target;

		public ProviderPropertyAccessor(FDeployedRootElement<FDExtensionRoot> target) {
			super(target);
			this.target = target;
		}

		// host 'instances'
		public Integer getFDBusInstanceID(FDExtensionElement obj) {
			return target.getInteger(obj, "FDBusInstanceID");
		}
		public String getFDBusUnicastAddress(FDExtensionElement obj) {
			return target.getString(obj, "FDBusUnicastAddress");
		}
		public Integer getFDBusReliableUnicastPort(FDExtensionElement obj) {
			return target.getInteger(obj, "FDBusReliableUnicastPort");
		}
		public Integer getFDBusUnreliableUnicastPort(FDExtensionElement obj) {
			return target.getInteger(obj, "FDBusUnreliableUnicastPort");
		}
		public List<Integer> getFDBusMulticastEventGroups(FDExtensionElement obj) {
			return target.getIntegerArray(obj, "FDBusMulticastEventGroups");
		}
		public List<String> getFDBusMulticastAddresses(FDExtensionElement obj) {
			return target.getStringArray(obj, "FDBusMulticastAddresses");
		}
		public List<Integer> getFDBusMulticastPorts(FDExtensionElement obj) {
			return target.getIntegerArray(obj, "FDBusMulticastPorts");
		}
		public List<Integer> getFDBusMulticastThreshold(FDExtensionElement obj) {
			return target.getIntegerArray(obj, "FDBusMulticastThreshold");
		}
		public FDBusDefaultErrorCoding getFDBusDefaultErrorCoding(FDExtensionElement obj) {
			String e = target.getEnum(obj, "FDBusDefaultErrorCoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertFDBusDefaultErrorCoding(e);
		}

	}

	/**
	 * Accessor for getting overwritten property values.
	 */
	public static class OverwriteAccessor
		extends org.genivi.commonapi.core.Deployment.OverwriteAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final IDataPropertyAccessor delegate;

		private final FDTypeOverwrites overwrites;
		private final Map<FField, FDField> mappedFields;
		private final Map<FEnumerator, FDEnumValue> mappedEnumerators;

		public OverwriteAccessor(
				FDTypeOverwrites overwrites,
				IDataPropertyAccessor delegate,
				MappingGenericPropertyAccessor genericAccessor)
		{
			super(overwrites, delegate, genericAccessor);
			this.target = genericAccessor;
			this.delegate = delegate;

			this.overwrites = overwrites;
			this.mappedFields = Maps.newHashMap();
			this.mappedEnumerators = Maps.newHashMap();
			if (overwrites!=null) {
				if (overwrites instanceof FDCompoundOverwrites) {
					// build mapping for compound fields
					for(FDField f : ((FDCompoundOverwrites)overwrites).getFields()) {
						this.mappedFields.put(f.getTarget(), f);
					}
				}
				if (overwrites instanceof FDEnumerationOverwrites) {
					// build mapping for enumerators
					for(FDEnumValue e : ((FDEnumerationOverwrites)overwrites).getEnumerators()) {
						this.mappedEnumerators.put(e.getTarget(), e);
					}
				}
			}
		}

		// host 'arrays'
		@Override
		public Integer getFDBusArrayMinLength(FArrayType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusArrayMinLength");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusArrayMinLength(obj);
		}
		@Override
		public Integer getFDBusArrayMinLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "FDBusArrayMinLength");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusArrayMinLength(obj);
		}
		@Override
		public Integer getFDBusArrayMaxLength(FArrayType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusArrayMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusArrayMaxLength(obj);
		}
		@Override
		public Integer getFDBusArrayMaxLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "FDBusArrayMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusArrayMaxLength(obj);
		}
		@Override
		public Integer getFDBusArrayLengthWidth(FArrayType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusArrayLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusArrayLengthWidth(obj);
		}
		@Override
		public Integer getFDBusArrayLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "FDBusArrayLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusArrayLengthWidth(obj);
		}

		// host 'unions'
		@Override
		public Integer getFDBusUnionLengthWidth(FUnionType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusUnionLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusUnionLengthWidth(obj);
		}
		@Override
		public Integer getFDBusUnionTypeWidth(FUnionType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusUnionTypeWidth");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusUnionTypeWidth(obj);
		}
		@Override
		public Boolean getFDBusUnionDefaultOrder(FUnionType obj) {
			if (overwrites!=null) {
				Boolean v = target.getBoolean(overwrites, "FDBusUnionDefaultOrder");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusUnionDefaultOrder(obj);
		}
		@Override
		public Integer getFDBusUnionMaxLength(FUnionType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusUnionMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusUnionMaxLength(obj);
		}

		// host 'structs'
		@Override
		public Integer getFDBusStructLengthWidth(FStructType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusStructLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusStructLengthWidth(obj);
		}

		// host 'enumerations'
		@Override
		public Integer getFDBusEnumWidth(FEnumerationType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusEnumWidth");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusEnumWidth(obj);
		}
		@Override
		public Integer getFDBusEnumBitWidth(FEnumerationType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusEnumBitWidth");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusEnumBitWidth(obj);
		}
		@Override
		public Integer getFDBusEnumInvalidValue(FEnumerationType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "FDBusEnumInvalidValue");
				if (v!=null)
					return v;
			}
			return delegate.getFDBusEnumInvalidValue(obj);
		}

		// host 'strings'
		@Override
		public Integer getFDBusStringLength(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "FDBusStringLength");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "FDBusStringLength");
					if (v!=null)
						return v;
				}
			}
			return delegate.getFDBusStringLength(obj);
		}
		@Override
		public Integer getFDBusStringLengthWidth(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "FDBusStringLengthWidth");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "FDBusStringLengthWidth");
					if (v!=null)
						return v;
				}
			}
			return delegate.getFDBusStringLengthWidth(obj);
		}
		@Override
		public FDBusStringEncoding getFDBusStringEncoding(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					String e = target.getEnum(fo, "FDBusStringEncoding");
					if (e!=null) {
						return DataPropertyAccessorHelper.convertFDBusStringEncoding(e);
					}
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					String e = target.getEnum(obj, "FDBusStringEncoding");
					if (e!=null) {
						return DataPropertyAccessorHelper.convertFDBusStringEncoding(e);
					}
				}
			}
			return delegate.getFDBusStringEncoding(obj);
		}

		// host 'byte_buffers'
		@Override
		public Integer getFDBusByteBufferMaxLength(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "FDBusByteBufferMaxLength");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "FDBusByteBufferMaxLength");
					if (v!=null)
						return v;
				}
			}
			return delegate.getFDBusByteBufferMaxLength(obj);
		}
		@Override
		public Integer getFDBusByteBufferMinLength(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "FDBusByteBufferMinLength");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "FDBusByteBufferMinLength");
					if (v!=null)
						return v;
				}
			}
			return delegate.getFDBusByteBufferMinLength(obj);
		}
		@Override
		public Integer getFDBusByteBufferLengthWidth(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "FDBusByteBufferLengthWidth");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "FDBusByteBufferLengthWidth");
					if (v!=null)
						return v;
				}
			}
			return delegate.getFDBusByteBufferLengthWidth(obj);
		}

		// host 'integers'
		@Override
		public Integer getFDBusIntegerBitWidth(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "FDBusIntegerBitWidth");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "FDBusIntegerBitWidth");
					if (v!=null)
						return v;
				}
			}
			return delegate.getFDBusIntegerBitWidth(obj);
		}
		@Override
		public Integer getFDBusIntegerInvalidValue(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "FDBusIntegerInvalidValue");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "FDBusIntegerInvalidValue");
					if (v!=null)
						return v;
				}
			}
			return delegate.getFDBusIntegerInvalidValue(obj);
		}


		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				FDTypeOverwrites overwrites = fo.getOverwrites();
				if (overwrites==null)
					return this; // TODO: correct?
				else
					// TODO: this or delegate?
					return new OverwriteAccessor(overwrites, this, target);

			}
			return delegate.getOverwriteAccessor(obj);
		}

		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			// check if this array is overwritten
			if (overwrites!=null) {
				// TODO: this or delegate?
				return new OverwriteAccessor(overwrites, this, target);
			}
			return delegate.getOverwriteAccessor(obj);
		}
	}
}

